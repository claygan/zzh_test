DecoratorPattern装饰者模式：
动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。 

开放-关闭原则：对扩展开放，对修改关闭；

这种模式的关键在于，不能造成类型的改变，需要把先前的类型原封不动的传递下去（同时最禁忌的事情也就是，不能把代码
写成依赖于具体的组件类型，只能针对抽象组件类型编程时，才不会因为装饰者而受到影响）

实际应用：
java-api中的“java.io”，就是运用的装饰者模式；
LineNumberInputStream,BufferedInputStream都扩展自FilterInputStream,FilterInputStream就是一个抽象的装饰类。

装饰者模式的缺点：
利用装饰者模式，常常造成设计中有大量的小类，数量实在太多，可能会造成使用此API程序员的困扰  